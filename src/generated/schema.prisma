generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  USER
  ADMIN
}

//
// User & Authentication
//
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          Role      @default(USER)
  emailVerified Boolean
  image         String?
  isOnline      Boolean   @default(false) // presence tracking
  lastActive    DateTime? @default(now()) // presence tracking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions Session[]
  accounts Account[]

  identityKey IdentityKey?

  @@index([isOnline])
  @@map("user")
}

model IdentityKey {
  id        String   @id @default(uuid())
  publicKey String   @unique // Storing the public key as a Base64 string
  createdAt DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("identity_key")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}
